import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
import numpy as np

dnl_data = [(1, -0.08058608058608056), (2, 0.034340659340659385), (3, -0.08058608058608056), (4, 0.14926739926739932), (5, -0.08058608058608056), (6, 0.034340659340659385), (7, -0.08058608058608056), (8, 0.14926739926739932), (9, -0.08058608058608056), (10, 0.034340659340659385), (11, -0.08058608058608056), (12, 0.14926739926739932), (13, -0.08058608058608056), (14, 0.034340659340659385), (15, -0.08058608058608056), (16, 0.14926739926739932), (17, -0.1955128205128205), (18, 0.14926739926739932), (19, -0.08058608058608056), (20, 0.14926739926739932), (21, -0.1955128205128205), (22, 0.034340659340659385), (23, 0.034340659340659385), (24, 0.034340659340659385), (25, -0.08058608058608056), (26, 0.034340659340659385), (27, 0.034340659340659385), (28, 0.034340659340659385), (29, -0.08058608058608056), (30, 0.034340659340659385), (31, -0.08058608058608056), (32, 0.14926739926739932), (33, -0.08058608058608056), (34, 0.034340659340659385), (35, -0.08058608058608056), (36, 0.14926739926739932), (37, -0.08058608058608056), (38, 0.034340659340659385), (39, -0.08058608058608056), (40, 0.14926739926739932), (41, -0.08058608058608056), (42, 0.034340659340659385), (43, -0.08058608058608056), (44, 0.14926739926739932), (45, -0.1955128205128205), (46, 0.034340659340659385), (47, 0.034340659340659385), (48, 0.14926739926739932), (49, -0.1955128205128205), (50, 0.034340659340659385), (51, 0.034340659340659385), (52, 0.034340659340659385), (53, -0.08058608058608056), (54, 0.034340659340659385), (55, 0.034340659340659385), (56, 0.034340659340659385), (57, -0.08058608058608056), (58, 0.034340659340659385), (59, -0.08058608058608056), (60, 0.14926739926739932), (61, -0.08058608058608056), (62, 0.034340659340659385), (63, -0.08058608058608056), (64, 0.14926739926739932), (65, -0.08058608058608056), (66, 0.034340659340659385), (67, -0.08058608058608056), (68, 0.14926739926739932), (69, -0.08058608058608056), (70, 0.034340659340659385), (71, -0.08058608058608056), (72, 0.14926739926739932), (73, -0.1955128205128205), (74, 0.14926739926739932), (75, -0.08058608058608056), (76, 0.14926739926739932), (77, -0.1955128205128205), (78, 0.034340659340659385), (79, 0.034340659340659385), (80, 0.034340659340659385), (81, -0.08058608058608056), (82, 0.034340659340659385), (83, 0.034340659340659385), (84, 0.034340659340659385), (85, -0.08058608058608056), (86, 0.034340659340659385), (87, -0.08058608058608056), (88, 0.14926739926739932), (89, -0.08058608058608056), (90, 0.034340659340659385), (91, -0.08058608058608056), (92, 0.14926739926739932), (93, -0.08058608058608056), (94, 0.034340659340659385), (95, -0.08058608058608056), (96, 0.14926739926739932), (97, -0.08058608058608056), (98, 0.034340659340659385), (99, -0.08058608058608056), (100, 0.14926739926739932), (101, -0.1955128205128205), (102, 0.14926739926739932), (103, -0.08058608058608056), (104, 0.14926739926739932), (105, -0.1955128205128205), (106, 0.034340659340659385), (107, 0.034340659340659385), (108, 0.034340659340659385), (109, -0.08058608058608056), (110, 0.034340659340659385), (111, 0.034340659340659385), (112, 0.034340659340659385), (113, -0.08058608058608056), (114, 0.034340659340659385), (115, -0.08058608058608056), (116, 0.14926739926739932), (117, -0.08058608058608056), (118, 0.034340659340659385), (119, -0.08058608058608056), (120, 0.14926739926739932), (121, -0.08058608058608056), (122, 0.034340659340659385), (123, -0.08058608058608056), (124, 0.14926739926739932), (125, -0.08058608058608056), (126, 0.034340659340659385), (127, -0.08058608058608056), (128, 0.14926739926739932), (129, -0.1955128205128205), (130, 0.14926739926739932), (131, -0.08058608058608056), (132, 0.14926739926739932), (133, -0.1955128205128205), (134, 0.034340659340659385), (135, 0.034340659340659385), (136, 0.14926739926739932), (137, -0.1955128205128205), (138, 0.034340659340659385), (139, 0.034340659340659385), (140, 0.034340659340659385), (141, -0.08058608058608056), (142, 0.034340659340659385), (143, -0.08058608058608056), (144, 0.14926739926739932), (145, -0.08058608058608056), (146, 0.034340659340659385), (147, -0.08058608058608056), (148, 0.14926739926739932), (149, -0.08058608058608056), (150, 0.034340659340659385), (151, -0.08058608058608056), (152, 0.14926739926739932), (153, -0.08058608058608056), (154, 0.034340659340659385), (155, -0.08058608058608056), (156, 0.14926739926739932), (157, -0.1955128205128205), (158, 0.14926739926739932), (159, -0.08058608058608056), (160, 0.14926739926739932), (161, -0.1955128205128205), (162, 0.034340659340659385), (163, 0.034340659340659385), (164, 0.14926739926739932), (165, -0.1955128205128205), (166, 0.034340659340659385), (167, 0.034340659340659385), (168, 0.034340659340659385), (169, -0.08058608058608056), (170, 0.034340659340659385), (171, -0.08058608058608056), (172, 0.14926739926739932), (173, -0.08058608058608056), (174, 0.034340659340659385), (175, -0.08058608058608056), (176, 0.14926739926739932), (177, -0.08058608058608056), (178, 0.034340659340659385), (179, -0.08058608058608056), (180, 0.14926739926739932), (181, -0.08058608058608056), (182, 0.034340659340659385), (183, -0.08058608058608056), (184, 0.14926739926739932), (185, -0.1955128205128205), (186, 0.14926739926739932), (187, -0.08058608058608056), (188, 0.14926739926739932), (189, -0.1955128205128205), (190, 0.034340659340659385), (191, 0.034340659340659385), (192, 0.14926739926739932), (193, -0.1955128205128205), (194, 0.034340659340659385), (195, 0.034340659340659385), (196, 0.034340659340659385), (197, -0.08058608058608056), (198, 0.034340659340659385), (199, -0.08058608058608056), (200, 0.14926739926739932), (201, -0.08058608058608056), (202, 0.034340659340659385), (203, -0.08058608058608056), (204, 0.14926739926739932), (205, -0.08058608058608056), (206, 0.034340659340659385), (207, -0.08058608058608056), (208, 0.14926739926739932), (209, -0.08058608058608056), (210, 0.034340659340659385), (211, -0.08058608058608056), (212, 0.14926739926739932), (213, -0.1955128205128205), (214, 0.14926739926739932), (215, -0.08058608058608056), (216, 0.14926739926739932), (217, -0.1955128205128205), (218, 0.034340659340659385), (219, 0.034340659340659385), (220, 0.14926739926739932), (221, -0.1955128205128205), (222, 0.034340659340659385), (223, 0.034340659340659385), (224, 0.034340659340659385), (225, -0.08058608058608056), (226, 0.034340659340659385), (227, -0.08058608058608056), (228, 0.14926739926739932), (229, -0.08058608058608056), (230, 0.034340659340659385), (231, -0.08058608058608056), (232, 0.14926739926739932), (233, -0.08058608058608056), (234, 0.034340659340659385), (235, -0.08058608058608056), (236, 0.14926739926739932), (237, -0.08058608058608056), (238, 0.034340659340659385), (239, -0.08058608058608056), (240, 0.14926739926739932), (241, -0.1955128205128205), (242, 0.14926739926739932), (243, -0.08058608058608056), (244, 0.14926739926739932), (245, -0.1955128205128205), (246, 0.034340659340659385), (247, 0.034340659340659385), (248, 0.14926739926739932), (249, -0.1955128205128205), (250, -0.08058608058608056), (251, -0.1955128205128205)]
inl_data = [(1, 0.0), (2, -0.08058608058608056), (3, -0.04624542124542118), (4, -0.12683150183150174), (5, 0.022435897435897578), (6, -0.058150183150182985), (7, -0.0238095238095236), (8, -0.10439560439560416), (9, 0.044871794871795156), (10, -0.03571428571428541), (11, -0.0013736263736260218), (12, -0.08195970695970659), (13, 0.06730769230769273), (14, -0.013278388278387829), (15, 0.021062271062271556), (16, -0.05952380952380901), (17, 0.08974358974359031), (18, -0.1057692307692302), (19, 0.04349816849816912), (20, -0.03708791208791144), (21, 0.11217948717948788), (22, -0.08333333333333263), (23, -0.04899267399267325), (24, -0.014652014652013864), (25, 0.01968864468864552), (26, -0.06089743589743504), (27, -0.026556776556775658), (28, 0.007783882783883728), (29, 0.04212454212454311), (30, -0.03846153846153745), (31, -0.004120879120878065), (32, -0.08470695970695863), (33, 0.06456043956044069), (34, -0.016025641025639872), (35, 0.018315018315019513), (36, -0.06227106227106105), (37, 0.08699633699633827), (38, 0.006410256410257706), (39, 0.04075091575091709), (40, -0.03983516483516347), (41, 0.10943223443223585), (42, 0.028846153846155284), (43, 0.06318681318681467), (44, -0.017399267399265894), (45, 0.13186813186813343), (46, -0.06364468864468709), (47, -0.0293040293040277), (48, 0.005036630036631684), (49, 0.154304029304031), (50, -0.04120879120878951), (51, -0.006868131868130123), (52, 0.027472527472529262), (53, 0.06181318681318865), (54, -0.018772893772891916), (55, 0.01556776556776747), (56, 0.049908424908426854), (57, 0.08424908424908624), (58, 0.003663003663005676), (59, 0.03800366300366506), (60, -0.0425824175824155), (61, 0.10668498168498382), (62, 0.026098901098903254), (63, 0.06043956043956264), (64, -0.020146520146517924), (65, 0.12912087912088138), (66, 0.04853479853480082), (67, 0.0828754578754602), (68, 0.0022893772893796405), (69, 0.15155677655677896), (70, 0.0709706959706984), (71, 0.10531135531135778), (72, 0.02472527472527722), (73, 0.17399267399267654), (74, -0.021520146520143973), (75, 0.12774725274725535), (76, 0.04716117216117478), (77, 0.19642857142857412), (78, 0.0009157509157536048), (79, 0.03525641025641299), (80, 0.06959706959707238), (81, 0.10393772893773176), (82, 0.023351648351651197), (83, 0.05769230769231058), (84, 0.09203296703296997), (85, 0.12637362637362937), (86, 0.0457875457875488), (87, 0.08012820512820819), (88, -0.0004578754578723754), (89, 0.14880952380952694), (90, 0.06822344322344638), (91, 0.10256410256410577), (92, 0.021978021978025203), (93, 0.17124542124542452), (94, 0.09065934065934396), (95, 0.12500000000000333), (96, 0.04441391941392277), (97, 0.1936813186813221), (98, 0.11309523809524154), (99, 0.1474358974359009), (100, 0.06684981684982035), (101, 0.21611721611721968), (102, 0.020604395604399167), (103, 0.1698717948717985), (104, 0.08928571428571792), (105, 0.23855311355311726), (106, 0.043040293040296745), (107, 0.07738095238095613), (108, 0.11172161172161552), (109, 0.1460622710622749), (110, 0.06547619047619434), (111, 0.09981684981685372), (112, 0.13415750915751312), (113, 0.1684981684981725), (114, 0.08791208791209194), (115, 0.12225274725275133), (116, 0.041666666666670765), (117, 0.19093406593407009), (118, 0.11034798534798952), (119, 0.1446886446886489), (120, 0.06410256410256833), (121, 0.21336996336996766), (122, 0.13278388278388709), (123, 0.16712454212454647), (124, 0.08653846153846591), (125, 0.23580586080586524), (126, 0.15521978021978466), (127, 0.18956043956044405), (128, 0.10897435897436349), (129, 0.2582417582417628), (130, 0.06272893772894231), (131, 0.21199633699634163), (132, 0.13141025641026105), (133, 0.28067765567766034), (134, 0.08516483516483983), (135, 0.11950549450549922), (136, 0.1538461538461586), (137, 0.3031135531135579), (138, 0.10760073260073741), (139, 0.1419413919413968), (140, 0.17628205128205618), (141, 0.21062271062271556), (142, 0.13003663003663501), (143, 0.1643772893772944), (144, 0.08379120879121384), (145, 0.23305860805861317), (146, 0.1524725274725326), (147, 0.18681318681319198), (148, 0.10622710622711141), (149, 0.25549450549451075), (150, 0.17490842490843017), (151, 0.20924908424908956), (152, 0.12866300366300898), (153, 0.27793040293040827), (154, 0.1973443223443277), (155, 0.23168498168498708), (156, 0.1510989010989065), (157, 0.30036630036630585), (158, 0.10485347985348534), (159, 0.25412087912088466), (160, 0.17353479853480408), (161, 0.3228021978022034), (162, 0.12728937728938292), (163, 0.1616300366300423), (164, 0.19597069597070169), (165, 0.345238095238101), (166, 0.1497252747252805), (167, 0.18406593406593988), (168, 0.21840659340659926), (169, 0.2527472527472586), (170, 0.17216117216117804), (171, 0.20650183150183743), (172, 0.12591575091575685), (173, 0.2751831501831562), (174, 0.19459706959707562), (175, 0.228937728937735), (176, 0.14835164835165443), (177, 0.2976190476190538), (178, 0.2170329670329732), (179, 0.2513736263736326), (180, 0.170787545787552), (181, 0.32005494505495136), (182, 0.23946886446887078), (183, 0.27380952380953016), (184, 0.1932234432234496), (185, 0.34249084249084893), (186, 0.14697802197802842), (187, 0.29624542124542774), (188, 0.21565934065934717), (189, 0.3649267399267465), (190, 0.169413919413926), (191, 0.20375457875458539), (192, 0.23809523809524477), (193, 0.3873626373626441), (194, 0.19184981684982358), (195, 0.22619047619048296), (196, 0.2605311355311424), (197, 0.29487179487180176), (198, 0.21428571428572118), (199, 0.24862637362638057), (200, 0.1680402930403), (201, 0.3173076923076993), (202, 0.2367216117216187), (203, 0.2710622710622781), (204, 0.19047619047619752), (205, 0.33974358974359686), (206, 0.2591575091575163), (207, 0.29349816849817567), (208, 0.2129120879120951), (209, 0.36217948717949444), (210, 0.28159340659341386), (211, 0.31593406593407325), (212, 0.23534798534799267), (213, 0.384615384615392), (214, 0.1891025641025715), (215, 0.3383699633699708), (216, 0.25778388278389025), (217, 0.4070512820512896), (218, 0.21153846153846909), (219, 0.24587912087912847), (220, 0.2802197802197879), (221, 0.4294871794871872), (222, 0.23397435897436666), (223, 0.268315018315026), (224, 0.3026556776556854), (225, 0.3369963369963448), (226, 0.2564102564102642), (227, 0.2907509157509236), (228, 0.21016483516484302), (229, 0.35943223443224237), (230, 0.2788461538461618), (231, 0.3131868131868212), (232, 0.2326007326007406), (233, 0.38186813186813995), (234, 0.30128205128205937), (235, 0.33562271062271876), (236, 0.2550366300366382), (237, 0.4043040293040375), (238, 0.32371794871795695), (239, 0.35805860805861633), (240, 0.27747252747253576), (241, 0.4267399267399351), (242, 0.2312271062271146), (243, 0.3804945054945139), (244, 0.29990842490843334), (245, 0.4491758241758327), (246, 0.2536630036630122), (247, 0.2880036630036716), (248, 0.32234432234433097), (249, 0.47161172161173026), (250, 0.2760989010989098), (251, 0.1955128205128292), (252, 0)]
dnl_extracted = [number for _, number in dnl_data]
inl_extracted = [number for _, number in inl_data]
dnl_codes = np.arange(1, 252)
inl_codes = np.arange(1, 253)

# Create DNL plot
plt.figure(figsize=(10, 4))
plt.plot(dnl_codes, dnl_extracted, color='blue')
plt.title('TDC DNL')
plt.xlabel('code(k)')
plt.ylabel('DNL(k)[LSB]')
plt.savefig('tdc_dnl_output.pdf', format='pdf', dpi=300)

# Create INL plot
plt.figure(figsize=(10, 4))
plt.plot(inl_codes, inl_extracted, color='blue')
plt.title('TDC INL')
plt.xlabel('code(k)')
plt.ylabel('INL(k)[LSB]')
plt.savefig('tdc_inl_output.pdf', format='pdf', dpi=300)


# Δdelay values in nanoseconds
delay_data = [(1, 0.2226), (2, 0.245), (3, 0.2702), (4, 0.2926), (5, 0.3206), (6, 0.343), (7, 0.3682), (8, 0.3906), (9, 0.4186), (10, 0.441), (11, 0.4662), (12, 0.4886), (13, 0.5166), (14, 0.539), (15, 0.5642), (16, 0.5866), (17, 0.6146), (18, 0.6342), (19, 0.6622), (20, 0.6846), (21, 0.7126), (22, 0.7322), (23, 0.7574), (24, 0.7826), (25, 0.8078), (26, 0.8302), (27, 0.8554), (28, 0.8806), (29, 0.9058), (30, 0.9282), (31, 0.9534), (32, 0.9758), (33, 1.0038), (34, 1.0262), (35, 1.0514), (36, 1.0738), (37, 1.1018), (38, 1.1242), (39, 1.1494), (40, 1.1718), (41, 1.1998), (42, 1.2222), (43, 1.2474), (44, 1.2698), (45, 1.2978), (46, 1.3174), (47, 1.3426), (48, 1.3678), (49, 1.3958), (50, 1.4154), (51, 1.4406), (52, 1.4658), (53, 1.491), (54, 1.5134), (55, 1.5386), (56, 1.5638), (57, 1.589), (58, 1.6114), (59, 1.6366), (60, 1.659), (61, 1.687), (62, 1.7094), (63, 1.7346), (64, 1.757), (65, 1.785), (66, 1.8074), (67, 1.8326), (68, 1.855), (69, 1.883), (70, 1.9054), (71, 1.9306), (72, 1.953), (73, 1.981), (74, 2.0006), (75, 2.0286), (76, 2.051), (77, 2.079), (78, 2.0986), (79, 2.1238), (80, 2.149), (81, 2.1742), (82, 2.1966), (83, 2.2218), (84, 2.247), (85, 2.2722), (86, 2.2946), (87, 2.3198), (88, 2.3422), (89, 2.3702), (90, 2.3926), (91, 2.4178), (92, 2.4402), (93, 2.4682), (94, 2.4906), (95, 2.5158), (96, 2.5382), (97, 2.5662), (98, 2.5886), (99, 2.6138), (100, 2.6362), (101, 2.6642), (102, 2.6838), (103, 2.7118), (104, 2.7342), (105, 2.7622), (106, 2.7818), (107, 2.807), (108, 2.8322), (109, 2.8574), (110, 2.8798), (111, 2.905), (112, 2.9302), (113, 2.9554), (114, 2.9778), (115, 3.003), (116, 3.0254), (117, 3.0534), (118, 3.0758), (119, 3.101), (120, 3.1234), (121, 3.1514), (122, 3.1738), (123, 3.199), (124, 3.2214), (125, 3.2494), (126, 3.2718), (127, 3.297), (128, 3.3194), (129, 3.3474), (130, 3.367), (131, 3.395), (132, 3.4174), (133, 3.4454), (134, 3.465), (135, 3.4902), (136, 3.5154), (137, 3.5434), (138, 3.563), (139, 3.5882), (140, 3.6134), (141, 3.6386), (142, 3.661), (143, 3.6862), (144, 3.7086), (145, 3.7366), (146, 3.759), (147, 3.7842), (148, 3.8066), (149, 3.8346), (150, 3.857), (151, 3.8822), (152, 3.9046), (153, 3.9326), (154, 3.955), (155, 3.9802), (156, 4.0026), (157, 4.0306), (158, 4.0502), (159, 4.0782), (160, 4.1006), (161, 4.1286), (162, 4.1482), (163, 4.1734), (164, 4.1986), (165, 4.2266), (166, 4.2462), (167, 4.2714), (168, 4.2966), (169, 4.3218), (170, 4.3442), (171, 4.3694), (172, 4.3918), (173, 4.4198), (174, 4.4422), (175, 4.4674), (176, 4.4898), (177, 4.5178), (178, 4.5402), (179, 4.5654), (180, 4.5878), (181, 4.6158), (182, 4.6382), (183, 4.6634), (184, 4.6858), (185, 4.7138), (186, 4.7334), (187, 4.7614), (188, 4.7838), (189, 4.8118), (190, 4.8314), (191, 4.8566), (192, 4.8818), (193, 4.9098), (194, 4.9294), (195, 4.9546), (196, 4.9798), (197, 5.005), (198, 5.0274), (199, 5.0526), (200, 5.075), (201, 5.103), (202, 5.1254), (203, 5.1506), (204, 5.173), (205, 5.201), (206, 5.2234), (207, 5.2486), (208, 5.271), (209, 5.299), (210, 5.3214), (211, 5.3466), (212, 5.369), (213, 5.397), (214, 5.4166), (215, 5.4446), (216, 5.467), (217, 5.495), (218, 5.5146), (219, 5.5398), (220, 5.565), (221, 5.593), (222, 5.6126), (223, 5.6378), (224, 5.663), (225, 5.6882), (226, 5.7106), (227, 5.7358), (228, 5.7582), (229, 5.7862), (230, 5.8086), (231, 5.8338), (232, 5.8562), (233, 5.8842), (234, 5.9066), (235, 5.9318), (236, 5.9542), (237, 5.9822), (238, 6.0046), (239, 6.0298), (240, 6.0522), (241, 6.0802), (242, 6.0998), (243, 6.1278), (244, 6.1502), (245, 6.1782), (246, 6.1978), (247, 6.223), (248, 6.2482), (249, 6.2762), (250, 6.2958), (251, 6.3182), (252, 6.3378)]
delay = [number for _, number in delay_data]

# Total output counts
dout_count = list(range(len(delay)))


# Define new delays extending beyond the last known delay
end_delays = np.arange(6.3378, 7, 0.2226)  # Adjust the range as necessary

# Append new delays to the existing array
delay = np.append(delay, end_delays)

# Extend the outputs array by repeating the last output value (252) for the new delays
last_output = 252  # Fixed output value for extended range
new_outputs = np.full(end_delays.shape, last_output)
dout_count = np.append(dout_count, new_outputs)


# Create the plot
plt.figure(figsize=(300, 150))
plt.plot(delay, dout_count, drawstyle='steps-post', linestyle='-', color='b')

for i, (x, y) in enumerate(zip(delay, dout_count)):
    if x <= 6.3378:
        plt.text(x + 0.01, y, str(y), color="orange", fontsize=15, ha='center', va='bottom')
        plt.text(x, y - 1.2, str(x), color="red", fontsize=12, ha='center', va='top')

# xticks = np.arange(min(delay), max(delay) + 0.028, 0.028)
# plt.xticks(ticks=xticks, labels=[f'{tick:.3f}' for tick in xticks], rotation=45, fontsize=45)

yticks = np.arange(min(dout_count), max(dout_count) + 5, 5)
plt.yticks(ticks=yticks, labels=[f'{tick:.3f}' for tick in yticks], fontsize=45)


plt.title('Graph of Data Output vs Delay of tdc_64', fontsize=80)
plt.xlabel('ΔDelay (ns)', fontsize=60)
plt.ylabel('Output Counts', fontsize=60)

plt.grid(True)

# Creating custom legends for the text annotations
# legend_elements = [Line2D([0], [0], color='orange', lw=20, label='Output Counts', size=40),
#                    Line2D([0], [0], color='red', lw=20, label='Delay Values', size=40)]

# Adding the legend to the plot
# plt.legend(handles=legend_elements, loc='upper right', fontsize='large', title='Legend', title_fontsize='')

# Save data
plt.savefig('Data_Outputs_vs_Delay_tdc_64.pdf', format='pdf', dpi=300)
