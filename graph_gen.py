import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
import numpy as np

dnl_data = [(1, -0.15166877904520415), (2, 0.16645542881284284), (3, -0.15166877904520415), (4, 0.16645542881284284), (5, -0.15166877904520415), (6, 0.16645542881284137), (7, -0.15166877904520415), (8, 0.1664554288128443), (9, -0.15166877904520415), (10, 0.16645542881284137), (11, -0.15166877904520415), (12, 0.06041402619349482), (13, -0.0456273764258576), (14, 0.06041402619349482), (15, -0.04562737642585466), (16, 0.06041402619349188), (17, -0.04562737642585466), (18, 0.06041402619349482), (19, -0.04562737642585466), (20, 0.06041402619349482), (21, -0.04562737642585466), (22, 0.060414026193488936), (23, -0.04562737642585466), (24, 0.06041402619349482), (25, -0.15166877904520415), (26, 0.1664554288128443), (27, -0.04562737642585466), (28, 0.060414026193488936), (29, -0.15166877904520415), (30, 0.1664554288128443), (31, -0.15166877904520415), (32, 0.1664554288128443), (33, -0.15166877904520415), (34, 0.1664554288128443), (35, -0.15166877904521003), (36, 0.1664554288128443), (37, -0.15166877904520415), (38, 0.1664554288128443), (39, -0.15166877904520415), (40, 0.06041402619349482), (41, -0.04562737642585466), (42, 0.060414026193488936), (43, -0.04562737642585466), (44, 0.060414026193488936), (45, -0.15166877904520415), (46, 0.16645542881285608), (47, -0.04562737642586644), (48, 0.06041402619349482), (49, -0.15166877904520415), (50, 0.16645542881285608), (51, -0.04562737642586644), (52, 0.06041402619349482), (53, -0.15166877904520415), (54, 0.16645542881283254), (55, -0.15166877904520415), (56, 0.16645542881285608), (57, -0.15166877904520415), (58, 0.16645542881283254), (59, -0.15166877904520415), (60, 0.16645542881285608), (61, -0.15166877904520415), (62, 0.16645542881283254), (63, -0.15166877904520415), (64, 0.16645542881285608), (65, -0.15166877904520415), (66, 0.16645542881283254), (67, -0.15166877904520415), (68, 0.16645542881283254), (69, -0.15166877904520415), (70, 0.16645542881285608), (71, -0.15166877904520415), (72, 0.06041402619349482), (73, -0.04562737642586644), (74, 0.16645542881285608), (75, -0.15166877904520415), (76, 0.06041402619349482), (77, -0.04562737642586644), (78, 0.16645542881285608), (79, -0.1516687790452277), (80, 0.06041402619349482), (81, -0.045627376425842886), (82, 0.16645542881283254), (83, -0.15166877904520415), (84, 0.06041402619349482), (85, -0.045627376425842886), (86, 0.16645542881283254), (87, -0.15166877904520415), (88, 0.06041402619349482), (89, -0.15166877904520415), (90, 0.16645542881285608), (91, -0.04562737642586644), (92, 0.06041402619349482), (93, -0.15166877904520415), (94, 0.16645542881283254), (95, -0.045627376425842886), (96, 0.06041402619349482), (97, -0.15166877904520415), (98, 0.16645542881285608), (99, -0.04562737642586644), (100, 0.060414026193471276), (101, -0.15166877904520415), (102, 0.16645542881285608), (103, -0.04562737642586644), (104, 0.060414026193518364), (105, -0.15166877904520415), (106, 0.16645542881283254), (107, -0.045627376425842886), (108, 0.060414026193471276), (109, -0.045627376425842886), (110, 0.06041402619349482), (111, -0.04562737642586644), (112, 0.060414026193518364), (113, -0.1516687790452277), (114, 0.16645542881283254), (115, -0.045627376425842886), (116, 0.06041402619349482), (117, -0.15166877904520415), (118, 0.16645542881285608), (119, -0.04562737642586644), (120, 0.06041402619349482), (121, -0.15166877904520415), (122, 0.16645542881283254), (123, -0.045627376425842886), (124, 0.06041402619349482), (125, -0.15166877904520415), (126, 0.16645542881283254), (127, -0.15166877904520415), (128, 0.16645542881283254), (129, -0.15166877904520415), (130, 0.16645542881285608), (131, -0.15166877904520415), (132, 0.06041402619349482), (133, -0.045627376425842886), (134, 0.060414026193471276), (135, -0.045627376425842886), (136, 0.06041402619349482), (137, -0.15166877904520415), (138, 0.16645542881285608), (139, -0.15166877904520415), (140, 0.16645542881280898), (141, -0.15166877904520415), (142, 0.060414026193518364), (143, -0.04562737642586644), (144, 0.06041402619349482), (145, -0.045627376425842886), (146, 0.060414026193471276), (147, -0.15166877904520415), (148, 0.16645542881285608), (149, -0.15166877904520415), (150, 0.16645542881285608), (151, -0.15166877904520415), (152, 0.060414026193471276), (153, -0.045627376425842886), (154, 0.06041402619349482), (155, -0.04562737642586644), (156, 0.06041402619349482), (157, -0.045627376425842886), (158, 0.060414026193471276), (159, -0.045627376425842886), (160, 0.06041402619349482), (161, -0.15166877904520415), (162, 0.16645542881285608), (163, -0.15166877904520415), (164, 0.060414026193471276), (165, -0.045627376425842886), (166, 0.06041402619349482), (167, -0.04562737642586644), (168, 0.06041402619349482), (169, -0.15166877904520415), (170, 0.16645542881283254), (171, -0.15166877904520415), (172, 0.16645542881285608), (173, -0.15166877904520415), (174, 0.16645542881285608), (175, -0.15166877904520415), (176, 0.060414026193471276), (177, -0.045627376425842886), (178, 0.06041402619349482), (179, -0.04562737642586644), (180, 0.060414026193518364), (181, -0.1516687790452277), (182, 0.16645542881283254), (183, -0.15166877904520415), (184, 0.16645542881285608), (185, -0.15166877904520415), (186, 0.06041402619349482), (187, -0.045627376425842886), (188, 0.060414026193471276), (189, -0.045627376425842886), (190, 0.06041402619349482), (191, -0.04562737642586644), (192, 0.060414026193518364), (193, -0.15166877904520415), (194, 0.16645542881280898), (195, -0.15166877904520415), (196, 0.16645542881285608), (197, -0.15166877904520415), (198, 0.16645542881285608), (199, -0.15166877904520415), (200, 0.060414026193471276), (201, -0.045627376425842886), (202, 0.06041402619349482), (203, -0.04562737642586644), (204, 0.060414026193471276), (205, -0.04562737642581934), (206, 0.060414026193471276), (207, -0.04562737642581934), (208, 0.060414026193471276), (209, -0.15166877904520415), (210, 0.16645542881285608), (211, -0.15166877904520415), (212, 0.060414026193471276), (213, -0.04562737642581934), (214, 0.060414026193471276), (215, -0.04562737642581934), (216, 0.060414026193471276), (217, -0.15166877904520415), (218, 0.16645542881285608), (219, -0.045627376425913524), (220, 0.06041402619356546), (221, -0.15166877904520415), (222, 0.1664554288127619), (223, -0.15166877904520415), (224, 0.16645542881285608), (225, -0.15166877904520415), (226, 0.16645542881285608), (227, -0.15166877904520415), (228, 0.060414026193471276), (229, -0.04562737642581934), (230, 0.060414026193471276), (231, -0.04562737642581934), (232, 0.060414026193471276), (233, -0.15166877904520415), (234, 0.16645542881285608), (235, -0.15166877904520415), (236, 0.16645542881285608), (237, -0.15166877904520415), (238, 0.16645542881285608), (239, -0.15166877904520415), (240, 0.16645542881280898), (241, -0.15166877904520415), (242, 0.16645542881280898), (243, -0.15166877904520415), (244, 0.06041402619356546), (245, -0.045627376425913524), (246, 0.060414026193518364), (247, -0.04562737642586644), (248, 0.060414026193471276), (249, -0.15166877904520415), (250, -0.04562737642581934), (251, -0.2577101816645889)]
inl_data = [(1, 0.0), (2, -0.15166877904520415), (3, 0.014786649767638688), (4, -0.13688212927756546), (5, 0.029573299535277375), (6, -0.12209547950992677), (7, 0.04435994930291459), (8, -0.10730882974228956), (9, 0.05914659907055475), (10, -0.0925221799746494), (11, 0.07393324883819197), (12, -0.07773553020701218), (13, -0.017321504013517362), (14, -0.06294888043937497), (15, -0.0025348542458801457), (16, -0.04816223067173481), (17, 0.012251795521757071), (18, -0.03337558090409759), (19, 0.02703844528939723), (20, -0.01858893113645743), (21, 0.04182509505703739), (22, -0.003802281368817273), (23, 0.05661174482467166), (24, 0.010984368398817002), (25, 0.07139839459231181), (26, -0.08027038445289233), (27, 0.08618504435995197), (28, 0.04055766793409731), (29, 0.10097169412758625), (30, -0.0506970849176179), (31, 0.1157583438952264), (32, -0.03591043514997774), (33, 0.13054499366286657), (34, -0.021123785382337584), (35, 0.14533164343050672), (36, -0.00633713561470331), (37, 0.160118293198141), (38, 0.008449514152936849), (39, 0.17490494296578116), (40, 0.023236163920577008), (41, 0.08365019011407182), (42, 0.03802281368821716), (43, 0.0984368398817061), (44, 0.052809463455851434), (45, 0.11322348964934037), (46, -0.03844528939586378), (47, 0.1280101394169923), (48, 0.08238276299112586), (49, 0.1427967891846207), (50, -0.008871989860583462), (51, 0.15758343895227261), (52, 0.11195606252640618), (53, 0.172370088719901), (54, 0.020701309674696855), (55, 0.1871567384875294), (56, 0.035487959442325245), (57, 0.20194338825518132), (58, 0.05027460920997717), (59, 0.2167300380228097), (60, 0.06506125897760556), (61, 0.23151668779046164), (62, 0.07984790874525749), (63, 0.24630333755809003), (64, 0.09463455851288588), (65, 0.26108998732574196), (66, 0.10942120828053781), (67, 0.27587663709337035), (68, 0.1242078580481662), (69, 0.29066328686099874), (70, 0.1389945078157946), (71, 0.30544993662865066), (72, 0.15378115758344651), (73, 0.21419518377694133), (74, 0.1685678073510749), (75, 0.335023236163931), (76, 0.18335445711872683), (77, 0.24376848331222165), (78, 0.19814110688635522), (79, 0.3645965356992113), (80, 0.2129277566539836), (81, 0.27334178284747845), (82, 0.22771440642163557), (83, 0.39416983523446814), (84, 0.24250105618926399), (85, 0.3029150823827588), (86, 0.25728770595691597), (87, 0.4237431347697485), (88, 0.27207435572454436), (89, 0.3324883819180392), (90, 0.18081960287283505), (91, 0.3472750316856911), (92, 0.3016476552598247), (93, 0.3620616814533195), (94, 0.21039290240811537), (95, 0.3768483312209479), (96, 0.33122095479510505), (97, 0.3916349809885999), (98, 0.23996620194339574), (99, 0.4064216307562518), (100, 0.36079425433038537), (101, 0.4212082805238566), (102, 0.26953950147865247), (103, 0.43599493029150854), (104, 0.3903675538656421), (105, 0.45078158005916047), (106, 0.2991128010139563), (107, 0.46556822982678886), (108, 0.419940853400946), (109, 0.48035487959441725), (110, 0.43472750316857434), (111, 0.4951415293620692), (112, 0.4495141529362027), (113, 0.5099281791297211), (114, 0.3582594000844934), (115, 0.524714828897326), (116, 0.4790874524714831), (117, 0.5395014786649779), (118, 0.38783269961977374), (119, 0.5542881284326298), (120, 0.5086607520067633), (121, 0.5690747782002581), (122, 0.41740599915505394), (123, 0.5838614279678864), (124, 0.5382340515420435), (125, 0.5986480777355383), (126, 0.44697929869033415), (127, 0.6134347275031666), (128, 0.4617659484579625), (129, 0.628221377270795), (130, 0.4765525982255908), (131, 0.6430080270384468), (132, 0.4913392479932427), (133, 0.5517532741867375), (134, 0.5061258977608946), (135, 0.5665399239543658), (136, 0.5209125475285229), (137, 0.5813265737220177), (138, 0.42965779467681353), (139, 0.5961132234896696), (140, 0.4444444444444654), (141, 0.6108998732572744), (142, 0.4592310942120702), (143, 0.5196451204055885), (144, 0.4740177439797221), (145, 0.5344317701732169), (146, 0.48880439374737394), (147, 0.5492184199408452), (148, 0.39754964089564104), (149, 0.5640050697084971), (150, 0.4123362906632929), (151, 0.5787917194761489), (152, 0.4271229404309448), (153, 0.48753696662441603), (154, 0.4419095901985731), (155, 0.5023236163920679), (156, 0.45669623996620146), (157, 0.5171102661596962), (158, 0.4714828897338533), (159, 0.5318969159273246), (160, 0.48626953950148166), (161, 0.5466835656949764), (162, 0.3950147866497723), (163, 0.5614702154626283), (164, 0.40980143641742417), (165, 0.4702154626108954), (166, 0.4245880861850525), (167, 0.48500211237854735), (168, 0.4393747359526809), (169, 0.49978876214617574), (170, 0.3481199831009716), (171, 0.5145754119138042), (172, 0.36290663286860003), (173, 0.529362061681456), (174, 0.3776932826362519), (175, 0.5441487114491079), (176, 0.3924799324039038), (177, 0.452893958597375), (178, 0.4072665821715321), (179, 0.46768060836502695), (180, 0.4220532319391605), (181, 0.4824672581326789), (182, 0.3307984790874512), (183, 0.49725390790028373), (184, 0.3455851288550796), (185, 0.5120405576679357), (186, 0.3603717786227315), (187, 0.42078580481622635), (188, 0.3751584283903835), (189, 0.43557245458385474), (190, 0.3899450781580118), (191, 0.45035910435150667), (192, 0.4047317279256402), (193, 0.4651457541191586), (194, 0.31347697507395444), (195, 0.4799324038867634), (196, 0.32826362484155924), (197, 0.4947190536544153), (198, 0.34305027460921117), (199, 0.5095057034220672), (200, 0.3578369243768631), (201, 0.41825095057033435), (202, 0.37262357414449143), (203, 0.4330376003379863), (204, 0.3874102239121198), (205, 0.4478242501055911), (206, 0.4021968736797718), (207, 0.4626108998732431), (208, 0.4169835234474238), (209, 0.4773975496408951), (210, 0.32572877059569094), (211, 0.492184199408547), (212, 0.34051542036334287), (213, 0.4009294465568142), (214, 0.35530207013099485), (215, 0.41571609632446616), (216, 0.37008871989864683), (217, 0.43050274609211814), (218, 0.278833967046914), (219, 0.44528939585977007), (220, 0.39966201943385654), (221, 0.460076045627422), (222, 0.30840726658221784), (223, 0.4748626953949797), (224, 0.32319391634977557), (225, 0.48964934516263164), (226, 0.3379805661174275), (227, 0.5044359949302836), (228, 0.3527672158850794), (229, 0.41318124207855067), (230, 0.36755386565273135), (231, 0.42796789184620265), (232, 0.38234051542038333), (233, 0.44275454161385464), (234, 0.2910857625686505), (235, 0.45754119138150656), (236, 0.3058724123363024), (237, 0.4723278411491585), (238, 0.32065906210395434), (239, 0.4871144909168104), (240, 0.33544571187160627), (241, 0.5019011406844153), (242, 0.3502323616392111), (243, 0.5166877904520201), (244, 0.3650190114068159), (245, 0.42543303760038137), (246, 0.37980566117446785), (247, 0.4402196873679862), (248, 0.3945923109421198), (249, 0.455006337135591), (250, 0.30333755809038687), (251, 0.25771018166456755), (252, -2.1371793224034263e-14)]
dnl_extracted = [number for _, number in dnl_data]
inl_extracted = [number for _, number in inl_data]
dnl_codes = np.arange(1, 252)
inl_codes = np.arange(1, 253)

# Create DNL plot
plt.figure(figsize=(10, 4))
plt.plot(dnl_codes, dnl_extracted, color='blue')
plt.title('TDC DNL')
plt.xlabel('code(k)')
plt.ylabel('DNL(k)[LSB]')
plt.savefig('extracted_tdc_dnl_output.pdf', format='pdf', dpi=300)

# Create INL plot
plt.figure(figsize=(10, 4))
plt.plot(inl_codes, inl_extracted, color='blue')
plt.title('TDC INL')
plt.xlabel('code(k)')
plt.ylabel('INL(k)[LSB]')
plt.savefig('extracted_tdc_inl_output.pdf', format='pdf', dpi=300)


# Δdelay values in nanoseconds
delay_data = [(0, 0.0), (1, 0.354), (2, 0.386), (3, 0.43), (4, 0.462), (5, 0.506), (6, 0.538), (7, 0.582), (8, 0.614), (9, 0.658), (10, 0.6900000000000001), (11, 0.734), (12, 0.766), (13, 0.806), (14, 0.842), (15, 0.882), (16, 0.918), (17, 0.958), (18, 0.994), (19, 1.034), (20, 1.07), (21, 1.11), (22, 1.1460000000000001), (23, 1.186), (24, 1.222), (25, 1.262), (26, 1.294), (27, 1.338), (28, 1.374), (29, 1.414), (30, 1.446), (31, 1.49), (32, 1.522), (33, 1.566), (34, 1.598), (35, 1.6420000000000001), (36, 1.674), (37, 1.718), (38, 1.75), (39, 1.794), (40, 1.826), (41, 1.866), (42, 1.9020000000000001), (43, 1.942), (44, 1.978), (45, 2.018), (46, 2.05), (47, 2.0940000000000003), (48, 2.13), (49, 2.17), (50, 2.202), (51, 2.2460000000000004), (52, 2.282), (53, 2.322), (54, 2.354), (55, 2.3979999999999997), (56, 2.4299999999999997), (57, 2.474), (58, 2.5060000000000002), (59, 2.55), (60, 2.582), (61, 2.6260000000000003), (62, 2.6580000000000004), (63, 2.702), (64, 2.734), (65, 2.7780000000000005), (66, 2.8100000000000005), (67, 2.854), (68, 2.886), (69, 2.9299999999999997), (70, 2.9619999999999997), (71, 3.0060000000000002), (72, 3.0380000000000003), (73, 3.0780000000000003), (74, 3.114), (75, 3.1580000000000004), (76, 3.1900000000000004), (77, 3.2300000000000004), (78, 3.266), (79, 3.3100000000000005), (80, 3.3419999999999996), (81, 3.3819999999999997), (82, 3.418), (83, 3.4619999999999997), (84, 3.4939999999999998), (85, 3.534), (86, 3.5700000000000003), (87, 3.614), (88, 3.646), (89, 3.686), (90, 3.718), (91, 3.7620000000000005), (92, 3.798), (93, 3.838), (94, 3.87), (95, 3.9139999999999997), (96, 3.95), (97, 3.99), (98, 4.022), (99, 4.066000000000001), (100, 4.102), (101, 4.1419999999999995), (102, 4.1739999999999995), (103, 4.218), (104, 4.254), (105, 4.2940000000000005), (106, 4.3260000000000005), (107, 4.37), (108, 4.406000000000001), (109, 4.446), (110, 4.482), (111, 4.522), (112, 4.558), (113, 4.598000000000001), (114, 4.63), (115, 4.6739999999999995), (116, 4.71), (117, 4.75), (118, 4.782), (119, 4.8260000000000005), (120, 4.862), (121, 4.902), (122, 4.934), (123, 4.978), (124, 5.014), (125, 5.054), (126, 5.086), (127, 5.13), (128, 5.162), (129, 5.2059999999999995), (130, 5.2379999999999995), (131, 5.282), (132, 5.314), (133, 5.354), (134, 5.390000000000001), (135, 5.43), (136, 5.466), (137, 5.506), (138, 5.538), (139, 5.582000000000001), (140, 5.614000000000001), (141, 5.6579999999999995), (142, 5.6899999999999995), (143, 5.73), (144, 5.766), (145, 5.806), (146, 5.8420000000000005), (147, 5.882), (148, 5.914), (149, 5.958), (150, 5.99), (151, 6.034000000000001), (152, 6.066000000000001), (153, 6.106), (154, 6.142), (155, 6.182), (156, 6.218), (157, 6.258), (158, 6.2940000000000005), (159, 6.334), (160, 6.37), (161, 6.41), (162, 6.442), (163, 6.486000000000001), (164, 6.518000000000001), (165, 6.558), (166, 6.594), (167, 6.634), (168, 6.67), (169, 6.71), (170, 6.742), (171, 6.786), (172, 6.818), (173, 6.862), (174, 6.894), (175, 6.938000000000001), (176, 6.970000000000001), (177, 7.01), (178, 7.046), (179, 7.086), (180, 7.122), (181, 7.162000000000001), (182, 7.194), (183, 7.2379999999999995), (184, 7.27), (185, 7.314), (186, 7.346), (187, 7.386), (188, 7.422000000000001), (189, 7.462), (190, 7.498), (191, 7.538), (192, 7.574), (193, 7.614000000000001), (194, 7.646000000000001), (195, 7.6899999999999995), (196, 7.7219999999999995), (197, 7.766), (198, 7.798), (199, 7.8420000000000005), (200, 7.8740000000000006), (201, 7.914), (202, 7.95), (203, 7.99), (204, 8.026), (205, 8.065999999999999), (206, 8.102), (207, 8.142), (208, 8.178), (209, 8.218), (210, 8.25), (211, 8.294), (212, 8.326), (213, 8.366), (214, 8.402000000000001), (215, 8.442), (216, 8.478000000000002), (217, 8.518), (218, 8.55), (219, 8.594000000000001), (220, 8.629999999999999), (221, 8.670000000000002), (222, 8.702000000000002), (223, 8.745999999999999), (224, 8.777999999999999), (225, 8.822), (226, 8.854), (227, 8.898), (228, 8.93), (229, 8.969999999999999), (230, 9.006), (231, 9.046), (232, 9.082), (233, 9.122), (234, 9.154), (235, 9.198), (236, 9.23), (237, 9.274000000000001), (238, 9.306000000000001), (239, 9.350000000000001), (240, 9.382000000000001), (241, 9.426), (242, 9.458), (243, 9.501999999999999), (244, 9.533999999999999), (245, 9.574000000000002), (246, 9.61), (247, 9.65), (248, 9.686), (249, 9.725999999999999), (250, 9.758), (251, 9.794), (252, 9.822)]
delay = [number for _, number in delay_data]

# Total output counts
dout_count = list(range(len(delay)))


# Define new delays extending beyond the last known delay
end_delays = np.arange(9.822, 10, 0.004)  # Adjust the range as necessary

# Append new delays to the existing array
delay = np.append(delay, end_delays)

# Extend the outputs array by repeating the last output value (252) for the new delays
last_output = 252  # Fixed output value for extended range
new_outputs = np.full(end_delays.shape, last_output)
dout_count = np.append(dout_count, new_outputs)


# Create the plot
plt.figure(figsize=(300, 150))
plt.plot(delay, dout_count, drawstyle='steps-post', linestyle='-', color='b')

for i, (x, y) in enumerate(zip(delay, dout_count)):
    if x <= 9.822:
        plt.text(x + 0.01, y, str(y), color="orange", fontsize=15, ha='center', va='bottom')
        plt.text(x, y - 1.2, str(x), color="red", fontsize=12, ha='center', va='top')

# xticks = np.arange(min(delay), max(delay) + 0.028, 0.028)
# plt.xticks(ticks=xticks, labels=[f'{tick:.3f}' for tick in xticks], rotation=45, fontsize=45)

yticks = np.arange(min(dout_count), max(dout_count) + 5, 5)
plt.yticks(ticks=yticks, labels=[f'{tick:.3f}' for tick in yticks], fontsize=45)


plt.title('Graph of Data Output vs Delay of Extracted tdc_64', fontsize=80)
plt.xlabel('ΔDelay (ns)', fontsize=60)
plt.ylabel('Output Counts', fontsize=60)

plt.grid(True)

# Creating custom legends for the text annotations
# legend_elements = [Line2D([0], [0], color='orange', lw=20, label='Output Counts', size=40),
#                    Line2D([0], [0], color='red', lw=20, label='Delay Values', size=40)]

# Adding the legend to the plot
# plt.legend(handles=legend_elements, loc='upper right', fontsize='large', title='Legend', title_fontsize='')

# Save data
plt.savefig('Data_Outputs_vs_Delay_Extracted_tdc_64.pdf', format='pdf', dpi=300)
